かしこまりました。
以下に、\*\*Project 10k → 1M における「バックテストまでの最新手順」\*\*を、Colab・ローカル両対応の構成に基づいて、**初心者にも分かりやすく・コード解説付きで**まとめます。

---

# ✅ バックテストまでの完全手順（2025年6月最新版）

---

## 🔷 全体の流れ（6ステップ）

| ステップ | 処理          | ファイル名                             | 出力                        |
| ---- | ----------- | --------------------------------- | ------------------------- |
| 1    | MT5から生データ取得 | `fetch_and_label.py`              | raw/ シンボル別CSV             |
| 2    | 特徴量生成       | `generate_features.py`            | processed/selfeat\_...csv |
| 3    | モデル学習       | `train_model.py`                  | model.pkl + features.json |
| 4    | バックテスト実行    | `backtest.py`                     | equityグラフ（.png）           |
| 5    | 自動パス管理      | `config.yaml` + `utils/common.py` | OSごとの保存先切替                |
| 6    | インポートパス解決   | `sys.path.insert(...)`            | utils読み込みエラー回避            |

---

## 🗂 ディレクトリ構成（重要）

```
project_10k_to_1m/
├─ config.yaml
├─ src/
│   ├─ data/
│   │   ├─ fetch_and_label.py
│   │   └─ generate_features.py
│   ├─ models/
│   │   ├─ train_model.py
│   │   └─ backtest.py
│   └─ utils/
│       ├─ __init__.py   ← 空でOK（モジュール認識用）
│       └─ common.py     ← パス切り替え関数を定義
└─ project_10k_to_1m_data/
    ├─ raw/         ← 生データ
    └─ processed/   ← 特徴量・モデル・テスト結果
```

---

## ✅ 1. 生データ取得 `fetch_and_label.py`

```bash
python src/data/fetch_and_label.py --symbol USDJPY --timeframe M5 --bars 100000
```

### 🔎 解説：

* MetaTrader 5 APIから、ローソク足データを取得
* `project_10k_to_1m_data/raw/USDJPY/M5/` にCSVを保存
* ファイル名に**シンボル・時間足・バー数・タイムスタンプ**を含む

---

## ✅ 2. 特徴量生成 `generate_features.py`

```bash
python src/data/generate_features.py --symbol USDJPY --timeframe M5 --bars 100000
```

### 🔎 解説：

* 「価格変化」「移動平均」「RSI」などのテクニカル指標を計算
* `processed/USDJPY/M5/selfeat_...csv` に保存
* データに `label` が含まれていなければ、`return > 0` を買いとみなして自動生成

---

## ✅ 3. モデル学習 `train_model.py`

```bash
python src/models/train_model.py --symbol USDJPY --timeframe M5 --bars 100000
```

### 🔎 解説：

* 最新の特徴量CSVを読み込み、XGBoostで学習
* `train_test_split()` で時系列順に分割し、**未来を使わない**
* 出力：

  * `xgb_model_....pkl`（モデル本体）
  * `..._features.json`（使用した特徴量のリスト）

---

## ✅ 4. バックテスト `backtest.py`

```bash
python src/models/backtest.py --symbol USDJPY --timeframe M5 --bars 100000
```

### 🔎 解説：

* 学習済みモデルで予測（`predict_proba`）
* `0.5` を閾値にして買いポジションを判定 → `return` を積算
* 損益を累積して \*\*エクイティカーブ（資産推移）\*\*を作成
* 出力先：
  `processed/USDJPY/M5/backtest_...png`

---

## ✅ 5. `config.yaml` による保存先管理

```yaml
data_root_local: C:/Projects/project_10k_to_1m_data
data_root_colab: project_10k_to_1m_data  # MyDrive直下を想定
```

* ローカル環境：Windows用の絶対パス
* Colab環境：Google Drive 直下を指定

---

## ✅ 6. `utils/common.py` によるパス切り替え関数

```python
def resolve_data_root(cfg):
    if "google.colab" in sys.modules:
        return Path("/content/drive/MyDrive") / cfg["data_root_colab"]
    else:
        return Path(cfg["data_root_local"]).resolve()
```

* どのスクリプトでも `load_config()` → `resolve_data_root(cfg)` で自動切り替え
* コード側は一切保存先を意識せずOK

---

## ✅ 各スクリプト共通：インポートパス挿入

```python
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).resolve().parents[1]))  # src/ を通す
from utils.common import load_config, resolve_data_root
```

これにより、`from utils.common import ...` がエラーになりません。

---

## ✅ まとめ（再掲）

| ステップ       | 処理内容        | 入力              | 出力              |
| ---------- | ----------- | --------------- | --------------- |
| ① fetch    | MT5からCSV保存  | MT5 API         | raw/xxx.csv     |
| ② feature  | テクニカル特徴量作成  | raw/            | selfeat\_...csv |
| ③ train    | モデル学習・保存    | selfeat\_...csv | .pkl + .json    |
| ④ backtest | モデル推論＆損益可視化 | 上記              | .png            |
| ⑤ config   | 保存先一元管理     | config.yaml     | ルート切替           |
| ⑥ path     | インポートパス統一   | utils/          | どのスクリプトでもOK     |

---

ご希望あれば：

* `manifest.csv` 自動生成
* `backtest_result.json`（Sharpe, DD, 勝率）追加
* Colab用ノートブックテンプレート

も即ご提供できます。どうぞ次のご指示をお聞かせください。
